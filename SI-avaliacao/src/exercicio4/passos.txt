
Criar um User novo:

1-Ler o ficheiro on está a lista de Users;

    Ex:{

        ArrayList<User> listaDeUsers = class.readUsers();

 
    }    

2- Criar novo User  e adicionar a lista

    Ex{

        User newUser = new User(nome, pass, mail, ... );
        
        listaDeUsers.add(newUser);

    }

3- Guardar a lista no ficheiro

    Ex{

    class.writeUsers(listaDeUsers);

    }


Código completo 

    Ex{

         ArrayList<User> listaDeUsers = class.readUsers();

         User newUser = new User(nome, pass, mail, ... );
        
         listaDeUsers.add(newUser);

        class.writeUsers(listaDeUsers);
    
    }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

O que é a class.readUser()?


- Class é uma classe que crias para ler e guardar os dados no ficheiro;


- .readUser();  é o método da classe que lê o ficheiro;

        Ex{

            public ArrayList<User> readUsers(){

                try{

                    FileInputStream fis = new FileInputStream([nomedoficheiro.tmp]);
                
                    ObjectInputStream ois = new ObjectInputStream(fis);

                    ArrayList<User> userList = (ArrayList<User>) ois.readObject(); // diz que o Objecto que está naquele ficheiro é um ArrayList<User> e diz que a userList é igual a esse ArrayList

                    ois.close(); // fechar os recursos

                    return userList; // retorna a lista dos usuarios que estão no ficheiro

                } catch (Exception e){

                    ArrayList<User> lista = new ArrayList<User>; // crias uma lista vazia
                    writeUsers(list);                           // escreve no ficheiro a nova lista (neste caso vazia), e cria tmb o ficheiro

                }

                

            }
            

        }


- .writeUsers(ArrayList<User> listaDeUsers); é o método que escreve no ficheiro a nova lista 


        Ex{

            public void writeUsers(ArrayList<User> listaDeUsers) {

                FileOutputStream fos = new FileOutputStream([nomedoficheiro.tmp]);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                
                oos.writeObject(listaDeUsers);
                oos.close();

            } 

        }


------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Como é que o Cliente acede a isto?


No Server:

    1) Criar um Objecto da classe "Class"

            Ex: {

                Class obj_ler_guardar = new Class();



            }

    2) Passar esse objecto para a Implementação

            Ex: {

                ExemploImpl obj = new ExemploImpl(obj_ler_guardar); // ExemploImpl corresponde ao MathImpl


            }

No ExemploImpl:

    1) Adicionas o Construtor e uma variável para o Objeto obj_ler_guardar

        Ex{

            public class ExemploImpl extends UnicastRemoteObject implements ExemploInterface { // cria a class

                public Class lg; // é a variavel do objecto Class;

                public ScholarImpl(Class obj_ler_guardar) throws RemoteException { // cria o Construtor desta class
                    
                    this.lg = obj_ler_guardar;
                    
                }

                public... // outros métodos

            }

        }

    2) Criar método para ler 

        Ex: {

            public ArrayList<User> readFromFile(){

                ArrayList<User> lista = lg.readUser();

                return lista;
            }


        }


No Cliente (para ter a lista de Users)

    1) Criar um Objecto ExemploInterface

        Ex{

            ExemploInterface exImpl = (ExemploInterface) registry.lookup("[Ex QQ]]");

        }
    
    2) Criar uma variavel e atribuir o valor

        Ex: {

            ArrayList<User> listaNoCliente = exImpl.readFromFile();


        }
    

